{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"location": {
            "type": "string",
            "defaultValue": "West US",
            "allowedValues": [
                "Brazil South",
                "East Asia",
                "East US",
                "Japan East",
                "Japan West",
                "North Central US",
                "North Europe",
                "South Central US",
                "West Europe",
                "West US",
                "Southeast Asia",
                "Central US",
                "East US 2"
            ],
            "metadata": {
                "description": "The location where the solution will be deployed."
            }
        },
		"baseUrl": {
			"type": "string",
			"defaultValue": "https://raw.githubusercontent.com/sysgain/redhat-openshift/master/"
		},
		"masterVmSize": {
			"type": "string",
			"defaultValue": "Standard_DS3_v2",
			"allowedValues": [
				"Standard_A4", "Standard_A5", "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11",
				"Standard_D2", "Standard_D3", "Standard_D4",
				"Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14",
				"Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2",
				"Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2",
				"Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
				"Standard_DS3", "Standard_DS4",
				"Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
				"Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2",
				"Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_DS14_v2",
				"Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5"
			],
			"metadata": {
				"description": "OpenShift Master VM size"
			}
		},
		"nodeVmSize": {
			"type": "string",
			"defaultValue": "Standard_DS3_v2",
			"allowedValues": [
				"Standard_A4", "Standard_A5", "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11",
				"Standard_D2", "Standard_D3", "Standard_D4",
				"Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14",
				"Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2",
				"Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2",
				"Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5",
				"Standard_DS3", "Standard_DS4",
				"Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14",
				"Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2",
				"Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_DS14_v2",
				"Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5"
			],
			"metadata": {
				"description": "OpenShift Node VM(s) size"
			}
		},
		"openshiftMasterHostname": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "OpenShift Master hostname"
			}
		},
		"openshiftMasterPublicIpDnsLabelPrefix": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "OpenShift Master VM public IP DNS name. Must be lowercase. It should match with the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$ or it will raise an error."
			}
		},
		"nodeLbPublicIpDnsLabelPrefix": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "OpenShift Nodes Load Balancer public IP DNS name. Must be lowercase. It should match with the following regular expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$ or it will raise an error."
			}
		},
		"nodePrefix": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "OpenShift Node VM prefix"
			}
		},
		"nodeInstanceCount": {
			"type": "int",
			"minValue": 1,
			"allowedValues": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
			"metadata": {
				"description": "Number of OpenShift nodes"
			}
		},
		"adminUsername": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Administrator username on all VMs"
			}
		},
		"adminPassword": {
			"type": "securestring",
			"minLength": 1,
			"metadata": {
				"description": "Administrator password for OpenShift Console"
			}
		},
		"cloudAccessUsername": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Cloud Access Username"
			}
		},
		"cloudAccessPassword": {
			"type": "securestring",
			"minLength": 1,
			"metadata": {
				"description": "Cloud Access password"
			}
		},
		"cloudAccessPoolId": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Pool ID with RHEL and OpenShift entitlements"
			}
		},
		"sshPublicKey": {
			"type": "securestring",
			"metadata": {
				"description": "SSH public key on all VMs"
			}
		},
		"subscriptionId": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Azure Subscription ID"
			}
		},
		"keyVaultResourceGroup": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Resource Group that contains the Key Vault"
			}
		},
		"keyVaultName": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Name of the Key Vault"
			}
		},
		"keyVaultSecret": {
			"type": "securestring",
			"minLength": 1,
			"metadata": {
				"description": "Key Vault Secret Name that contains the Private Key"
			}
		},
		"defaultSubDomain": {
			"type": "string",
			"minLength": 1,
			"metadata": {
				"description": "Default Subdomain for application routing (Wildcard DNS)"
			}
		}
	},
	"variables": {
		"apiVersionCompute": "2015-06-15",
		"apiVersionNetwork": "2015-06-15",
		"apiVersionStorage": "2015-06-15",
		"apiVersionLinkTemplate": "2015-01-01",
		"storageAccountType": "Standard_LRS",
		"namingInfix": "[toLower(parameters('nodePrefix'))]",
		"newStorageAccountMaster": "[concat(uniqueString(concat(resourceGroup().id, 'msa', '0')), 'msa')]",
		"newStorageAccountNode": "[concat(uniqueString(concat(resourceGroup().id, 'nsa', '1')), 'nsa')]",
		"addressPrefix": "192.168.0.0/16",
		"masterSubnetPrefix": "192.168.1.0/24",
		"nodeSubnetPrefix": "192.168.2.0/24",
		"virtualNetworkName": "osvnet",
		"nodeLbPublicIpAddressName": "[concat(variables('namingInfix'), 'lbpip')]",
		"masterSubnetName": "mastersubnet",
		"nodeSubnetName": "[concat(variables('namingInfix'), 'nodesubnet')]",
		"nodeLoadBalancerName": "[concat(variables('namingInfix'), 'lb')]",
		"nodePublicIpAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('nodeLbPublicIpDnsLabelPrefix'))]",
		"nodeLbId": "[resourceId('Microsoft.Network/loadBalancers', variables('nodeLoadBalancerName'))]",
		"lbFrontEndConfigId": "[concat(variables('nodeLbId'), '/frontendIPConfigurations/loadBalancerFrontEnd')]",
		"lbBackendPoolId": "[concat(variables('nodeLbId'),'/backendAddressPools/loadBalancerBackend')]",
		"lbHttpProbeId": "[concat(variables('nodeLbId'),'/probes/httpProbe')]",
		"lbHttpsProbeId": "[concat(variables('nodeLbId'),'/probes/httpsProbe')]",
		"osType": {
			"publisher": "RedHat",
			"offer": "RHEL",
			"sku": "7.2",
			"version": "latest"
		},
		"sshPrivateKey": {
			"reference": {
				"keyvault": {
					"id": "[concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
				},
				"secretName": "[parameters('keyVaultSecret')]"
			}
		},
		"imageReference": "[variables('osType')]",
		"sshKeyPath": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
        "nodePrepScriptUrl": "[concat(parameters('baseUrl'), 'redhat/scripts/nodePrep.sh')]",
        "masterPrepScriptUrl": "[concat(parameters('baseUrl'), 'redhat/scripts/masterPrep.sh')]",
        "nodePrepScriptFileName": "nodePrep.sh",
        "masterPrepScriptFileName": "masterPrep.sh",
        "openshiftDeploymentTemplateUrl": "[concat(parameters('baseUrl'), 'redhat/nested/openshiftdeploy.json')]",
		"vmSizesMap": {
			"Standard_A4": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A5": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A6": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A7": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A8": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A9": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A10": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_A11": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D1": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D3": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D4": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D11": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D12": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D13": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D14": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D1_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D2_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D3_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D4_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D5_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D11_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D12_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D13_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_D14_v2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G1": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G2": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G3": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G4": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_G5": {
				"storageAccountType": "Standard_LRS"
			},
			"Standard_DS1": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS3": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS4": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS11": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS12": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS13": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS14": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS1_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS2_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS3_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS4_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS5_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS11_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS12_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS13_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS14_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_DS15_v2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS1": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS2": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS3": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS4": {
				"storageAccountType": "Premium_LRS"
			},
			"Standard_GS5": {
				"storageAccountType": "Premium_LRS"
			}
		}
	},
	"resources": [

        {
			"apiVersion": "[variables('apiVersionNetwork')]",
			"type": "Microsoft.Network/networkSecurityGroups",
			"name": "[concat(parameters('openshiftMasterHostname'), '-nsg')]",
			"location": "[parameters('location')]",
			"properties": {
				"securityRules": [{
					"name": "allowSSHin_all",
					"properties": {
						"description": "Allow SSH in from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "22",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 100,
						"direction": "Inbound"
					}
				}, {
					"name": "allowHTTPS_all",
					"properties": {
						"description": "Allow HTTPS connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "443",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 200,
						"direction": "Inbound"
					}
				}, {
					"name": "allowOpenShiftConsolIn_all",
					"properties": {
						"description": "Allow HTTPS connections from all locations",
						"protocol": "Tcp",
						"sourcePortRange": "*",
						"destinationPortRange": "8443",
						"sourceAddressPrefix": "*",
						"destinationAddressPrefix": "*",
						"access": "Allow",
						"priority": 300,
						"direction": "Inbound"
					}
				}]
			}
		}, {
			"type": "Microsoft.Network/virtualNetworks",
			"name": "[variables('virtualNetworkName')]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "VirtualNetwork"
			},
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefix')]"
					]
				},
				"subnets": [{
					"name": "[variables('masterSubnetName')]",
					"properties": {
						"addressPrefix": "[variables('masterSubnetPrefix')]"
					}
				}, {
					"name": "[variables('nodeSubnetName')]",
					"properties": {
						"addressPrefix": "[variables('nodeSubnetPrefix')]"
					}
				}]
			}
		}, {
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('newStorageAccountMaster')]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('apiVersionStorage')]",
			"tags": {
				"displayName": "StorageAccounts"
			},
			"properties": {
				"accountType": "[variables('vmSizesMap')[parameters('masterVmSize')].storageAccountType]"
			}
		}, {
			"type": "Microsoft.Storage/storageAccounts",
			"name": "[variables('newStorageAccountNode')]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('apiVersionStorage')]",
			"tags": {
				"displayName": "StorageAccounts"
			},
			"properties": {
				"accountType": "[variables('vmSizesMap')[parameters('nodeVmSize')].storageAccountType]"
			}
		}, {
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[parameters('nodeLbPublicIpDnsLabelPrefix')]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftNodeLBPublicIP"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[parameters('nodeLbPublicIpDnsLabelPrefix')]"
				}
			}
		}, {
			"type": "Microsoft.Compute/availabilitySets",
			"name": "nodes",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"properties": {}
		}, {
			"type": "Microsoft.Network/loadBalancers",
			"name": "[variables('nodeLoadBalancerName')]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftNodeLB"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', parameters('nodeLbPublicIpDnsLabelPrefix'))]"
			],
			"properties": {
				"frontendIPConfigurations": [{
					"name": "LoadBalancerFrontEnd",
					"properties": {
						"publicIPAddress": {
							"id": "[variables('nodePublicIpAddressId')]"
						}
					}
				}],
				"backendAddressPools": [{
					"name": "loadBalancerBackEnd"
				}],
				"loadBalancingRules": [{
					"name": "OpenShiftRouterHTTP",
					"properties": {
						"frontendIPConfiguration": {
							"id": "[variables('lbFrontEndConfigId')]"
						},
						"backendAddressPool": {
							"id": "[variables('lbBackendPoolId')]"
						},
						"protocol": "Tcp",
						"frontendPort": 80,
						"backendPort": 80,
						"probe": {
							"id": "[variables('lbHttpProbeId')]"
						}
					}
				}, {
					"name": "OpenShiftRouterHTTPS",
					"properties": {
						"frontendIPConfiguration": {
							"id": "[variables('lbFrontEndConfigId')]"
						},
						"backendAddressPool": {
							"id": "[variables('lbBackendPoolId')]"
						},
						"protocol": "Tcp",
						"frontendPort": 443,
						"backendPort": 443,
						"probe": {
							"id": "[variables('lbHttpsProbeId')]"
						}
					}
				}],
				"probes": [{
					"name": "httpProbe",
					"properties": {
						"protocol": "Tcp",
						"port": 80,
						"intervalInSeconds": 5,
						"numberOfProbes": 2
					}
				}, {
					"name": "httpsProbe",
					"properties": {
						"protocol": "Tcp",
						"port": 443,
						"intervalInSeconds": 5,
						"numberOfProbes": 2
					}
				}]
			}
		}, {
			"type": "Microsoft.Network/loadBalancers/inboundNatRules",
			"name": "[concat(variables('nodeLoadBalancerName'), '/', 'SSH-', variables('namingInfix'), '-', copyIndex())]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "inboundNatRules"
			},
			"copy": {
				"name": "nodeLbLoop",
				"count": "[parameters('nodeInstanceCount')]"
			},
			"dependsOn": [
				"[variables('nodeLoadBalancerName')]"
			],
			"properties": {
				"frontendIPConfiguration": {
					"id": "[variables('lbFrontEndConfigId')]"
				},
				"protocol": "tcp",
				"frontendPort": "[copyIndex(2200)]",
				"backendPort": 22,
				"enableFloatingIP": false
			}
		},

		{
			"type": "Microsoft.Network/publicIPAddresses",
			"name": "[parameters('openshiftMasterPublicIpDnsLabelPrefix')]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftMasterPublicIP"
			},
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[parameters('openshiftMasterPublicIpDnsLabelPrefix')]"
				}
			}
		}, {
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(parameters('openshiftMasterHostname'), 'nic')]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftMasterNetworkInterface"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', parameters('openshiftMasterPublicIpDnsLabelPrefix'))]"
			],
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(parameters('openshiftMasterHostname'), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"publicIPAddress": {
							"id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('openshiftMasterPublicIpDnsLabelPrefix'))]"
						},
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('masterSubnetName'))]"
						}
					}
				}],
				"networkSecurityGroup":
				{
					"id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(parameters('openshiftMasterHostname'), '-nsg'))]"
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[parameters('openshiftMasterHostname')]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "OpenShiftMasterVirtualMachine"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountMaster'))]",
				"[concat('Microsoft.Network/networkInterfaces/', parameters('openshiftMasterHostname'), 'nic')]"
			],
			"properties": {
				"hardwareProfile": {
					"vmSize": "[parameters('masterVmSize')]"
				},
				"osProfile": {
					"computerName": "[parameters('openshiftMasterHostname')]",
					"adminUsername": "[parameters('adminUsername')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": true,
						"ssh": {
							"publicKeys": [{
								"path": "[variables('sshKeyPath')]",
								"keyData": "[parameters('sshPublicKey')]"
							}]
						}
					}
				},
				"storageProfile": {
					"imageReference": "[variables('imageReference')]",
					"osDisk": {
						"name": "[concat(parameters('openshiftMasterHostname'), 'osdisk')]",
						"vhd": {
							"uri": "[concat('https://', variables('newStorageAccountMaster'), '.blob.core.windows.net/vhd/', parameters('openshiftMasterHostname'), '.vhd')]"
						},
						"caching": "ReadWrite",
						"createOption": "FromImage"
					},
					"dataDisks": [{
						"name": "[concat(parameters('openshiftMasterHostname'), '-docker-pool')]",
						"diskSizeGB": "1023",
						"lun": 0,
						"vhd": {
							"uri": "[concat('https://', variables('newStorageAccountMaster'), '.blob.core.windows.net/vhd/', parameters('openshiftMasterHostname'), '-docker-pool.vhd')]"
						},
						"createOption": "Empty"
					}]
				},
				"networkProfile": {
					"networkInterfaces": [{
						"id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('openshiftMasterHostname'), 'nic'))]"
					}]
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(parameters('openshiftMasterHostname'), '/deployOpenShift')]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "PrepMaster"
			},
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/', parameters('openshiftMasterHostname'))]"
			],
			"properties": {
				"publisher": "Microsoft.OSTCExtensions",
				"type": "CustomScriptForLinux",
				"typeHandlerVersion": "1.5",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('masterPrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('sh ', variables('masterPrepScriptFileName'), ' ', parameters('cloudAccessUsername'), ' ', parameters('cloudAccessPassword'), ' ', parameters('cloudAccessPoolId'))]"
				}
			}
		}, {
			"type": "Microsoft.Network/networkInterfaces",
			"name": "[concat(variables('namingInfix'), copyIndex(), 'nic')]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('apiVersionNetwork')]",
			"tags": {
				"displayName": "OpenShiftNodeNetworkInterfaces"
			},
			"dependsOn": [
				"[concat('Microsoft.Network/loadBalancers/', variables('nodeLoadBalancerName'))]",
				"[concat('Microsoft.Network/loadBalancers/', variables('nodeLoadBalancerName'), '/inboundNatRules/SSH-', variables('namingInfix'), '-', copyIndex())]"
			],
			"copy": {
				"name": "nodeNICLoop",
				"count": "[parameters('nodeInstanceCount')]"
			},
			"properties": {
				"ipConfigurations": [{
					"name": "[concat(variables('namingInfix'), copyIndex(), 'ipconfig')]",
					"properties": {
						"privateIPAllocationMethod": "Dynamic",
						"subnet": {
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('nodeSubnetName'))]"
						},
						"loadBalancerBackendAddressPools": [{
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('nodeLoadBalancerName'), '/backendAddressPools/loadBalancerBackEnd')]"
						}],
						"loadBalancerInboundNatRules": [{
							"id": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('nodeLoadBalancerName'), '/inboundNatRules/SSH-', variables('namingInfix'), '-', copyIndex())]"
						}]
					}
				}]
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines",
			"name": "[concat(variables('namingInfix'), '-', copyIndex())]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "OpenShiftNodes"
			},
			"dependsOn": [
				"[resourceId('Microsoft.Storage/storageAccounts', variables('newStorageAccountNode'))]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('namingInfix'), copyIndex(), 'nic')]"
			],
			"copy": {
				"name": "nodeLoop",
				"count": "[parameters('nodeInstanceCount')]"
			},
			"properties": {
				"availabilitySet": {
					"id": "[resourceId('Microsoft.Compute/availabilitySets', 'nodes')]"
				},
				"hardwareProfile": {
					"vmSize": "[parameters('nodeVmSize')]"
				},
				"osProfile": {
					"computerName": "[concat(variables('namingInfix'), '-', copyIndex())]",
					"adminUsername": "[parameters('adminUsername')]",
					"linuxConfiguration": {
						"disablePasswordAuthentication": true,
						"ssh": {
							"publicKeys": [{
								"path": "[variables('sshKeyPath')]",
								"keyData": "[parameters('sshPublicKey')]"
							}]
						}
					}
				},
				"storageProfile": {
					"imageReference": "[variables('imageReference')]",
					"osDisk": {
						"name": "[concat(variables('namingInfix'), copyIndex(), 'osdisk')]",
						"vhd": {
							"uri": "[concat('https://', variables('newStorageAccountNode'), '.blob.core.windows.net/vhd/', variables('namingInfix'), copyIndex(), '.vhd')]"
						},
						"caching": "ReadWrite",
						"createOption": "FromImage"
					},
					"dataDisks": [{
						"name": "[concat(variables('namingInfix'), copyIndex(), '-docker-pool')]",
						"diskSizeGB": "1023",
						"lun": 0,
						"vhd": {
							"uri": "[concat('https://', variables('newStorageAccountNode'), '.blob.core.windows.net/vhd/', variables('namingInfix'), copyIndex(), '-docker-pool.vhd')]"
						},
						"createOption": "Empty"
					}]
				},
				"networkProfile": {
					"networkInterfaces": [{
						"id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('namingInfix'), copyIndex(), 'nic'))]"
					}]
				}
			}
		}, {
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"name": "[concat(variables('namingInfix'), '-', copyIndex(), '/prepNodes')]",
			"location": "[parameters('location')]",
			"apiVersion": "[variables('apiVersionCompute')]",
			"tags": {
				"displayName": "PrepNodes"
			},
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/', variables('namingInfix'), '-', copyIndex())]"
			],
			"copy": {
				"name": "nodeScriptLoop",
				"count": "[parameters('nodeInstanceCount')]"
			},
			"properties": {
				"publisher": "Microsoft.OSTCExtensions",
				"type": "CustomScriptForLinux",
				"typeHandlerVersion": "1.5",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"fileUris": [
						"[variables('nodePrepScriptUrl')]"
					]
				},
				"protectedSettings": {
					"commandToExecute": "[concat('sh ', variables('nodePrepScriptFileName'), ' ', parameters('cloudAccessUsername'), ' ', parameters('cloudAccessPassword'), ' ', parameters('cloudAccessPoolId'))]"
				}
			}
		}, {
			"name": "OpenShiftDeployment",
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('apiVersionLinkTemplate')]",
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/', parameters('openshiftMasterHostname'), '/extensions/deployOpenShift')]",
				"nodeScriptLoop"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[variables('openshiftDeploymentTemplateUrl')]",
					"contentVersion": "1.0.0.0"
				},
				"parameters": {
					"baseUrl": {
						"value": "[parameters('baseUrl')]"
					},
					"openshiftMasterHostname": {
						"value": "[parameters('openshiftMasterHostname')]"
					},
					"openshiftMasterPublicIpFqdn": {
						"value": "[reference(parameters('openshiftMasterPublicIpDnsLabelPrefix')).dnsSettings.fqdn]"
					},
					"openshiftMasterPublicIpAddress": {
						"value": "[reference(parameters('openshiftMasterPublicIpDnsLabelPrefix')).ipAddress]"
					},
					"nodePrefix": {
						"value": "[variables('namingInfix')]"
					},
					"nodeInstanceCount": {
						"value": "[parameters('nodeInstanceCount')]"
					},
					"adminUsername": {
						"value": "[parameters('adminUsername')]"
					},
					"adminPassword": {
						"value": "[parameters('adminPassword')]"
					},
					"defaultSubDomain": {
						"value": "[concat(reference(parameters('nodeLbPublicIpDnsLabelPrefix')).ipAddress, '.xip.io')]"
					},
					"sshPrivateKey": {
						"reference": {
							"keyvault": {
								"id": "[concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', parameters('keyVaultResourceGroup'), '/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
							},
							"secretName": "[parameters('keyVaultSecret')]"
						}
					}
				}
			}
		}
	],
	"outputs": {
		"openshiftConsoleUrl": {
			"type": "string",
			"value": "[concat('https://', reference(parameters('openshiftMasterPublicIpDnsLabelPrefix')).dnsSettings.fqdn, ':8443/console')]"
		},
		"openshiftMasterSsh": {
			"type": "string",
			"value": "[concat('ssh ', parameters('adminUsername'), '@', reference(parameters('openshiftMasterPublicIpDnsLabelPrefix')).dnsSettings.fqdn)]"
		},
		"openshiftNodeLoadBalancerFQDN": {
			"type": "string",
			"value": "[reference(parameters('nodeLbPublicIpDnsLabelPrefix')).dnsSettings.fqdn]"
		}
	}
}
